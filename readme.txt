--------------------------------CRM-SSM（SpringMvc+Spring+MyBatis）项目整合----------------------------------------------
1：整合前的准备工作：
	1:创建crm数据库并创建所需要的表；
	2:创建包：com.crm_ssm01.pojo;com.crm_ssm01.dao;com.crm_ssm01.service;com.crm_ssm01.controller;com.crm_ssm01.utils;
	3:导入静态UI页面;
	4:编写pojo类;
2：CRM框架整合前戏：
	1:导入jar包;
	2:创建Config资源包，配置配置文件
		Dao层：（持久层，Mybatis框架主导）
			SqlMapConfig.xml            SSM整合后Mybatis的核心配置文件
			db.properties               配置数据库的4大参数
			applicationContext-dao.xml  SSM整合后Spring在持久层的配置
					加载数据库数据库配置文件，配置数据库连接池资源DataSource
					配置Sql会话工厂，映射数据库连接池资源和加载Mybatis的核心配置文件
					配置扫描mapper,扫描dao的mapper类
		Service层：（业务层，Spring框架主导）
			applicationContext-service.xml      SSM整合后Spring在业务层注解扫描配置
					注解扫描，扫描Service层的@Service注解
			applicationContext-transaction.xml  SSM整合后Spring在业务层事务的配置					
					配置事务管理器平台，管理数据库连接池DataSource
					配置通知,传播事务的行为:delete*、update*、insert*、save*、find*、get*
					配置切面:execution(* com.crm_ssm01.service.*.*(..))
		Controller层：（Web层/表现层，SpringMvc框架主导）
			SpringMvc.xml      SSM整合后SpringMvc的核心配置文件
			    	配置Controller层的@Controller注解
			    	配置注解驱动:代替我们去寻找最新的处理器映射器和处理器适配器
			    	配置视图解析器:让我们可以省去繁琐的前缀和后缀名
		log4j.properties       日志文件
	3:配置web.xml
		配置了Spring的扫描配置文件和Spring的监听器，配置了SpringMvc的前端控制器，解决post乱码的问题
3：CRM整合正式开始
---------------------------------------CRM项目的用户模块:注册、登录、退出、修改密码---------------------------------------------
注册:注册时需要输入用户名、密码、角色名，其中都用了异步的非空校验,但是用户名用了异步查询,在输入用户名后需要进入到数据库后台查询如果重复禁止用这个名字作为自己的用户名。
          注册成功后会自动跳转到用户登录页面。
登录:登录时需要需要输入用户名和密码，其中都用了非空校验，输入完成后提交会到后台进行验证，如果成功则跳转到主页面并用session记录下用户信息，如果登录失败则还是在登录
          页面，并提示输入用户名或密码错误。
退出:退出时需要清除session中的用户信息，并跳转到登录页面。
修改密码:用户需要输入旧密码进行了非空校验，新密码进行了要求输入6-20位并且要求有英文和数字，确认密码进行了与新密码的比对校验，如果不一样则提示用户，如果前面的三个文本
                 域有一个不满足都会阻止用户提交修改密码，提交后会进行后台的校验，如果旧密码与数据库中存的密码不一样也会阻止用户进行密码修改并提示用户：旧密码错误。
-------------------------------------- CRM项目的客户模块:增加、查询、删除、修改------------------------------------------------
增加:增加客户时,有两个特色点一是上传客户的附加;另一个特色需要在跳转到客户添加页面时需要异步加载出下拉列表:客户来源、客户行业、客户级别三个下拉列表。然后进行客户保存。
          其中上传附件需要创建在tomcat中创建图片的服务器声明保存的路径,还需要在前台的form表单添加:enctype="multipart/form-data",并在表现层方法中声明参数为
    Multipart接收它，在保存时需要判断客户是否上传了附件，上传了进行附件保存添加，否则不进行附件的保存。下拉列表的保存在pojo的Customer中声明了下拉列表的三个对
          像.
查询:查询客户时，显示客户的列表，进行了分页，进行了带条件查询，查询条件有：客户名字、客户行业、客户来源、客户级别；其中客户名字、客户行业、客户来源查询为下拉列表查询。
删除:删除客户时，接收客户的id查询此客户信息，需要先判断此客户下是否有联系人，有则不能删除，否则要判断此客户是否上传了附件，有则先删除附件再删除客户。但是一般在企业级
	开发，不是真的删除客户，而是在客户列表声明一个单独的status状态定义:0不可用,1可用。删除就是把其属性值改为0.
修改:修改客户时，需要先从接收的客户id查询出客户的信息，显示在修改页面上，然后对客户信息进行修改，提交时，需要先判断客户是否修改了上传的附件，修改了，先判断此客户以前是
         否有附件有先删除再把新的附件保存，否则直接保存新附件。其中：客户行业、客户来源、客户级别为下拉列表的修改。
---------------------------------------CRM项目的联系人模块:增加、查询、删除、修改-----------------------------------------------
增加:增加联系人时，其特点是所属客户为下拉列表进行选择关联客户，性别为两个属性值一样的radio按钮，数据库保存的也是1(男)和2(女)的值，然后进行联系人的保存。
查询:查询联系人时，显示联系人的列表，进行了分页，进行了带条件的查询，查询条件有：联系人名字，客户名称(下拉列表)。
删除:删除联系人时，接收联系人的id进行联系人的删除。
修改:修改联系人时，接收联系人的id，将联系人的信息显示到修改联系人的页面，对联系人进行修改。
---------------------------------------CRM项目的拜访客户模块:添加、查询------------------------------------------------------
添加:添加拜访客户时，其特色点是关联了被拜访的客户(下拉框),还有一个特色点是增加时间框，其为一个时间的插件，添加了插件的js方法。对时间的字符串进行了Date的转换；
查询:查询拜访客户时，显示拜访客户的列表，进行了分页，进行了带条件的查询，查询条件有：被拜访的客户名称，时间区域段的查询
---------------------------------------CRM项目的综合查询模块:客户信息查询、联系人信息查询、拜访客户信息查询-----------------------------
客户信息查询:和客户的查询功能一致；
联系人信息查询:和联系人的查询功能一致；
拜访客户信息查询：和拜访客户的查询功能一致；
---------------------------------------CRM项目的统计分析模块:客户行业统计模块、客户来源统计模块-------------------------------------
客户行业统计模块：客户表和字典表进行关联查询，判断客户的外键cust_industry和字典表主键一致的数据记录数。
客户来源统计模块：客户表和字典表进行关联查询，判断客户的外键cust_source和字典表主键一致的数据记录数。
---------------------------------------CRM项目的黑色料理----------------------------------------------------------------
拦截功能：在用户操作CRM系统时会判断用户是否登录登录放行，否则进行拦截，返回到登录页面。
异常功能：在用户操作CRM系统时出现异常配置了全局异常处理器，并显示了全局异常处理器。
转化器功能：对时间格式的转换：字符串转换为Date格式；对"  "空格字符串的处理：将它转换为null。